using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using reservations_data.Models.Attributes;

namespace reservations_data.Models
{
    public class Reservation
    {
        [Key]
        [Required]
        public int ReservationId { get; set; }

        [Required]
        public DateTime From { get; set; }

        /// <summary>
        /// A possible future request could be to implement different time range for each reservations
        /// </summary>
        [Required]
        public DateTime To { get; set; }

        [MaxLength(50)]
        [MinLength(1)]
        [Required]
        public string FirstName { get; set; }

        [MaxLength(50)]
        [MinLength(1)]
        [Required]
        public string LastName { get; set; }

        [Required]
        [ClientEmail]
        public string Email { get; set; }

        [Required]
        public string PhoneNumber { get; set; }

        [MaxLength(500)]
        public string Description { get; set; }

        [Required]
        public int RoomId { get; set; }

        public Room Room { get; set; }
        
        //Generated by the IDE
        protected bool Equals(Reservation other)
        {
            return ReservationId == other.ReservationId && From.Equals(other.From) && To.Equals(other.To) && string.Equals(FirstName, other.FirstName) && string.Equals(LastName, other.LastName) && string.Equals(Email, other.Email) && string.Equals(PhoneNumber, other.PhoneNumber) && string.Equals(Description, other.Description) && RoomId == other.RoomId && Equals(Room, other.Room);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((Reservation) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = ReservationId;
                hashCode = (hashCode * 397) ^ From.GetHashCode();
                hashCode = (hashCode * 397) ^ To.GetHashCode();
                hashCode = (hashCode * 397) ^ (FirstName != null ? FirstName.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (LastName != null ? LastName.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (Email != null ? Email.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (PhoneNumber != null ? PhoneNumber.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (Description != null ? Description.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ RoomId;
                hashCode = (hashCode * 397) ^ (Room != null ? Room.GetHashCode() : 0);
                return hashCode;
            }
        }

        public static bool operator ==(Reservation left, Reservation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Reservation left, Reservation right)
        {
            return !Equals(left, right);
        }
    }
}